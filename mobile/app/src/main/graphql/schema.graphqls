"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "posts"
  """
  delete_posts("""filter the rows which have to be deleted""" where: posts_bool_exp!): posts_mutation_response
  """
  delete single row from the table: "posts"
  """
  delete_posts_by_pk(id: uuid!): posts
  """
  delete data from the table: "roles"
  """
  delete_roles("""filter the rows which have to be deleted""" where: roles_bool_exp!): roles_mutation_response
  """
  delete single row from the table: "roles"
  """
  delete_roles_by_pk(id: uuid!): roles
  """
  delete data from the table: "users"
  """
  delete_users("""filter the rows which have to be deleted""" where: users_bool_exp!): users_mutation_response
  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users
  """
  insert data into the table: "posts"
  """
  insert_posts("""the rows to be inserted""" objects: [posts_insert_input!]!, """on conflict condition""" on_conflict: posts_on_conflict): posts_mutation_response
  """
  insert a single row into the table: "posts"
  """
  insert_posts_one("""the row to be inserted""" object: posts_insert_input!, """on conflict condition""" on_conflict: posts_on_conflict): posts
  """
  insert data into the table: "roles"
  """
  insert_roles("""the rows to be inserted""" objects: [roles_insert_input!]!, """on conflict condition""" on_conflict: roles_on_conflict): roles_mutation_response
  """
  insert a single row into the table: "roles"
  """
  insert_roles_one("""the row to be inserted""" object: roles_insert_input!, """on conflict condition""" on_conflict: roles_on_conflict): roles
  """
  insert data into the table: "users"
  """
  insert_users("""the rows to be inserted""" objects: [users_insert_input!]!, """on conflict condition""" on_conflict: users_on_conflict): users_mutation_response
  """
  insert a single row into the table: "users"
  """
  insert_users_one("""the row to be inserted""" object: users_insert_input!, """on conflict condition""" on_conflict: users_on_conflict): users
  """
  update data of the table: "posts"
  """
  update_posts("""increments the integer columns with given value of the filtered values""" _inc: posts_inc_input, """sets the columns of the filtered rows to the given values""" _set: posts_set_input, """filter the rows which have to be updated""" where: posts_bool_exp!): posts_mutation_response
  """
  update single row of the table: "posts"
  """
  update_posts_by_pk("""increments the integer columns with given value of the filtered values""" _inc: posts_inc_input, """sets the columns of the filtered rows to the given values""" _set: posts_set_input, pk_columns: posts_pk_columns_input!): posts
  """
  update data of the table: "roles"
  """
  update_roles("""sets the columns of the filtered rows to the given values""" _set: roles_set_input, """filter the rows which have to be updated""" where: roles_bool_exp!): roles_mutation_response
  """
  update single row of the table: "roles"
  """
  update_roles_by_pk("""sets the columns of the filtered rows to the given values""" _set: roles_set_input, pk_columns: roles_pk_columns_input!): roles
  """
  update data of the table: "users"
  """
  update_users("""sets the columns of the filtered rows to the given values""" _set: users_set_input, """filter the rows which have to be updated""" where: users_bool_exp!): users_mutation_response
  """
  update single row of the table: "users"
  """
  update_users_by_pk("""sets the columns of the filtered rows to the given values""" _set: users_set_input, pk_columns: users_pk_columns_input!): users
}

"""
column ordering options
"""
enum order_by {
  """
  in the ascending order, nulls last
  """
  asc
  """
  in the ascending order, nulls first
  """
  asc_nulls_first
  """
  in the ascending order, nulls last
  """
  asc_nulls_last
  """
  in the descending order, nulls first
  """
  desc
  """
  in the descending order, nulls first
  """
  desc_nulls_first
  """
  in the descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "posts"
"""
type posts {
  created_at: timestamptz!
  id: uuid!
  location: String!
  name_food: String!
  picture: String!
  seen: Int!
  status: Boolean!
  updated_at: timestamptz!
  """
  An object relationship
  """
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "posts"
"""
type posts_aggregate {
  aggregate: posts_aggregate_fields
  nodes: [posts!]!
}

"""
aggregate fields of "posts"
"""
type posts_aggregate_fields {
  avg: posts_avg_fields
  count(columns: [posts_select_column!], distinct: Boolean): Int
  max: posts_max_fields
  min: posts_min_fields
  stddev: posts_stddev_fields
  stddev_pop: posts_stddev_pop_fields
  stddev_samp: posts_stddev_samp_fields
  sum: posts_sum_fields
  var_pop: posts_var_pop_fields
  var_samp: posts_var_samp_fields
  variance: posts_variance_fields
}

"""
order by aggregate values of table "posts"
"""
input posts_aggregate_order_by {
  avg: posts_avg_order_by
  count: order_by
  max: posts_max_order_by
  min: posts_min_order_by
  stddev: posts_stddev_order_by
  stddev_pop: posts_stddev_pop_order_by
  stddev_samp: posts_stddev_samp_order_by
  sum: posts_sum_order_by
  var_pop: posts_var_pop_order_by
  var_samp: posts_var_samp_order_by
  variance: posts_variance_order_by
}

"""
input type for inserting array relation for remote table "posts"
"""
input posts_arr_rel_insert_input {
  data: [posts_insert_input!]!
  on_conflict: posts_on_conflict
}

"""
aggregate avg on columns
"""
type posts_avg_fields {
  seen: Float
}

"""
order by avg() on columns of table "posts"
"""
input posts_avg_order_by {
  seen: order_by
}

"""
Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'.
"""
input posts_bool_exp {
  _and: [posts_bool_exp]
  _not: posts_bool_exp
  _or: [posts_bool_exp]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  location: String_comparison_exp
  name_food: String_comparison_exp
  picture: String_comparison_exp
  seen: Int_comparison_exp
  status: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "posts"
"""
enum posts_constraint {
  """
  unique or primary key constraint
  """
  posts_pkey
}

"""
input type for incrementing integer column in table "posts"
"""
input posts_inc_input {
  seen: Int
}

"""
input type for inserting data into table "posts"
"""
input posts_insert_input {
  created_at: timestamptz
  id: uuid
  location: String
  name_food: String
  picture: String
  seen: Int
  status: Boolean
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""
aggregate max on columns
"""
type posts_max_fields {
  created_at: timestamptz
  id: uuid
  location: String
  name_food: String
  picture: String
  seen: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "posts"
"""
input posts_max_order_by {
  created_at: order_by
  id: order_by
  location: order_by
  name_food: order_by
  picture: order_by
  seen: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type posts_min_fields {
  created_at: timestamptz
  id: uuid
  location: String
  name_food: String
  picture: String
  seen: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "posts"
"""
input posts_min_order_by {
  created_at: order_by
  id: order_by
  location: order_by
  name_food: order_by
  picture: order_by
  seen: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "posts"
"""
type posts_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!
  """
  data of the affected rows by the mutation
  """
  returning: [posts!]!
}

"""
input type for inserting object relation for remote table "posts"
"""
input posts_obj_rel_insert_input {
  data: posts_insert_input!
  on_conflict: posts_on_conflict
}

"""
on conflict condition type for table "posts"
"""
input posts_on_conflict {
  constraint: posts_constraint!
  update_columns: [posts_update_column!]!
  where: posts_bool_exp
}

"""
ordering options when selecting data from "posts"
"""
input posts_order_by {
  created_at: order_by
  id: order_by
  location: order_by
  name_food: order_by
  picture: order_by
  seen: order_by
  status: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "posts"
"""
input posts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "posts"
"""
enum posts_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  location
  """
  column name
  """
  name_food
  """
  column name
  """
  picture
  """
  column name
  """
  seen
  """
  column name
  """
  status
  """
  column name
  """
  updated_at
  """
  column name
  """
  user_id
}

"""
input type for updating data in table "posts"
"""
input posts_set_input {
  created_at: timestamptz
  id: uuid
  location: String
  name_food: String
  picture: String
  seen: Int
  status: Boolean
  updated_at: timestamptz
  user_id: uuid
}

"""
aggregate stddev on columns
"""
type posts_stddev_fields {
  seen: Float
}

"""
order by stddev() on columns of table "posts"
"""
input posts_stddev_order_by {
  seen: order_by
}

"""
aggregate stddev_pop on columns
"""
type posts_stddev_pop_fields {
  seen: Float
}

"""
order by stddev_pop() on columns of table "posts"
"""
input posts_stddev_pop_order_by {
  seen: order_by
}

"""
aggregate stddev_samp on columns
"""
type posts_stddev_samp_fields {
  seen: Float
}

"""
order by stddev_samp() on columns of table "posts"
"""
input posts_stddev_samp_order_by {
  seen: order_by
}

"""
aggregate sum on columns
"""
type posts_sum_fields {
  seen: Int
}

"""
order by sum() on columns of table "posts"
"""
input posts_sum_order_by {
  seen: order_by
}

"""
update columns of table "posts"
"""
enum posts_update_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  location
  """
  column name
  """
  name_food
  """
  column name
  """
  picture
  """
  column name
  """
  seen
  """
  column name
  """
  status
  """
  column name
  """
  updated_at
  """
  column name
  """
  user_id
}

"""
aggregate var_pop on columns
"""
type posts_var_pop_fields {
  seen: Float
}

"""
order by var_pop() on columns of table "posts"
"""
input posts_var_pop_order_by {
  seen: order_by
}

"""
aggregate var_samp on columns
"""
type posts_var_samp_fields {
  seen: Float
}

"""
order by var_samp() on columns of table "posts"
"""
input posts_var_samp_order_by {
  seen: order_by
}

"""
aggregate variance on columns
"""
type posts_variance_fields {
  seen: Float
}

"""
order by variance() on columns of table "posts"
"""
input posts_variance_order_by {
  seen: order_by
}

"""
query root
"""
type query_root {
  """
  fetch data from the table: "posts"
  """
  posts("""distinct select on columns""" distinct_on: [posts_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [posts_order_by!], """filter the rows returned""" where: posts_bool_exp): [posts!]!
  """
  fetch aggregated fields from the table: "posts"
  """
  posts_aggregate("""distinct select on columns""" distinct_on: [posts_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [posts_order_by!], """filter the rows returned""" where: posts_bool_exp): posts_aggregate!
  """
  fetch data from the table: "posts" using primary key columns
  """
  posts_by_pk(id: uuid!): posts
  """
  fetch data from the table: "roles"
  """
  roles("""distinct select on columns""" distinct_on: [roles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [roles_order_by!], """filter the rows returned""" where: roles_bool_exp): [roles!]!
  """
  fetch aggregated fields from the table: "roles"
  """
  roles_aggregate("""distinct select on columns""" distinct_on: [roles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [roles_order_by!], """filter the rows returned""" where: roles_bool_exp): roles_aggregate!
  """
  fetch data from the table: "roles" using primary key columns
  """
  roles_by_pk(id: uuid!): roles
  """
  fetch data from the table: "users"
  """
  users("""distinct select on columns""" distinct_on: [users_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [users_order_by!], """filter the rows returned""" where: users_bool_exp): [users!]!
  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate("""distinct select on columns""" distinct_on: [users_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [users_order_by!], """filter the rows returned""" where: users_bool_exp): users_aggregate!
  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users
}

"""
columns and relationships of "roles"
"""
type roles {
  id: uuid!
  name: String!
}

"""
aggregated selection of "roles"
"""
type roles_aggregate {
  aggregate: roles_aggregate_fields
  nodes: [roles!]!
}

"""
aggregate fields of "roles"
"""
type roles_aggregate_fields {
  count(columns: [roles_select_column!], distinct: Boolean): Int
  max: roles_max_fields
  min: roles_min_fields
}

"""
order by aggregate values of table "roles"
"""
input roles_aggregate_order_by {
  count: order_by
  max: roles_max_order_by
  min: roles_min_order_by
}

"""
input type for inserting array relation for remote table "roles"
"""
input roles_arr_rel_insert_input {
  data: [roles_insert_input!]!
  on_conflict: roles_on_conflict
}

"""
Boolean expression to filter rows from the table "roles". All fields are combined with a logical 'AND'.
"""
input roles_bool_exp {
  _and: [roles_bool_exp]
  _not: roles_bool_exp
  _or: [roles_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "roles"
"""
enum roles_constraint {
  """
  unique or primary key constraint
  """
  roles_name_key
  """
  unique or primary key constraint
  """
  roles_pkey
}

"""
input type for inserting data into table "roles"
"""
input roles_insert_input {
  id: uuid
  name: String
}

"""
aggregate max on columns
"""
type roles_max_fields {
  id: uuid
  name: String
}

"""
order by max() on columns of table "roles"
"""
input roles_max_order_by {
  id: order_by
  name: order_by
}

"""
aggregate min on columns
"""
type roles_min_fields {
  id: uuid
  name: String
}

"""
order by min() on columns of table "roles"
"""
input roles_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "roles"
"""
type roles_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!
  """
  data of the affected rows by the mutation
  """
  returning: [roles!]!
}

"""
input type for inserting object relation for remote table "roles"
"""
input roles_obj_rel_insert_input {
  data: roles_insert_input!
  on_conflict: roles_on_conflict
}

"""
on conflict condition type for table "roles"
"""
input roles_on_conflict {
  constraint: roles_constraint!
  update_columns: [roles_update_column!]!
  where: roles_bool_exp
}

"""
ordering options when selecting data from "roles"
"""
input roles_order_by {
  id: order_by
  name: order_by
}

"""
primary key columns input for table: "roles"
"""
input roles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "roles"
"""
enum roles_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  name
}

"""
input type for updating data in table "roles"
"""
input roles_set_input {
  id: uuid
  name: String
}

"""
update columns of table "roles"
"""
enum roles_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  name
}

"""
subscription root
"""
type subscription_root {
  """
  fetch data from the table: "posts"
  """
  posts("""distinct select on columns""" distinct_on: [posts_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [posts_order_by!], """filter the rows returned""" where: posts_bool_exp): [posts!]!
  """
  fetch aggregated fields from the table: "posts"
  """
  posts_aggregate("""distinct select on columns""" distinct_on: [posts_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [posts_order_by!], """filter the rows returned""" where: posts_bool_exp): posts_aggregate!
  """
  fetch data from the table: "posts" using primary key columns
  """
  posts_by_pk(id: uuid!): posts
  """
  fetch data from the table: "roles"
  """
  roles("""distinct select on columns""" distinct_on: [roles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [roles_order_by!], """filter the rows returned""" where: roles_bool_exp): [roles!]!
  """
  fetch aggregated fields from the table: "roles"
  """
  roles_aggregate("""distinct select on columns""" distinct_on: [roles_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [roles_order_by!], """filter the rows returned""" where: roles_bool_exp): roles_aggregate!
  """
  fetch data from the table: "roles" using primary key columns
  """
  roles_by_pk(id: uuid!): roles
  """
  fetch data from the table: "users"
  """
  users("""distinct select on columns""" distinct_on: [users_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [users_order_by!], """filter the rows returned""" where: users_bool_exp): [users!]!
  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate("""distinct select on columns""" distinct_on: [users_select_column!], """limit the number of rows returned""" limit: Int, """skip the first n rows. Use only with order_by""" offset: Int, """sort the rows by one or more columns""" order_by: [users_order_by!], """filter the rows returned""" where: users_bool_exp): users_aggregate!
  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  address: String!
  birth_date: date!
  id: uuid!
  img_profile: String
  name: String!
  password: String!
  phone_number: String!
  """
  An object relationship
  """
  role: roles!
  role_id: uuid!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  address: String_comparison_exp
  birth_date: date_comparison_exp
  id: uuid_comparison_exp
  img_profile: String_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
  phone_number: String_comparison_exp
  role: roles_bool_exp
  role_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint
  """
  users_phone_number_key
  """
  unique or primary key constraint
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  address: String
  birth_date: date
  id: uuid
  img_profile: String
  name: String
  password: String
  phone_number: String
  role: roles_obj_rel_insert_input
  role_id: uuid
}

"""
aggregate max on columns
"""
type users_max_fields {
  address: String
  birth_date: date
  id: uuid
  img_profile: String
  name: String
  password: String
  phone_number: String
  role_id: uuid
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  address: order_by
  birth_date: order_by
  id: order_by
  img_profile: order_by
  name: order_by
  password: order_by
  phone_number: order_by
  role_id: order_by
}

"""
aggregate min on columns
"""
type users_min_fields {
  address: String
  birth_date: date
  id: uuid
  img_profile: String
  name: String
  password: String
  phone_number: String
  role_id: uuid
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  address: order_by
  birth_date: order_by
  id: order_by
  img_profile: order_by
  name: order_by
  password: order_by
  phone_number: order_by
  role_id: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!
  """
  data of the affected rows by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  address: order_by
  birth_date: order_by
  id: order_by
  img_profile: order_by
  name: order_by
  password: order_by
  phone_number: order_by
  role: roles_order_by
  role_id: order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  address
  """
  column name
  """
  birth_date
  """
  column name
  """
  id
  """
  column name
  """
  img_profile
  """
  column name
  """
  name
  """
  column name
  """
  password
  """
  column name
  """
  phone_number
  """
  column name
  """
  role_id
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  address: String
  birth_date: date
  id: uuid
  img_profile: String
  name: String
  password: String
  phone_number: String
  role_id: uuid
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  address
  """
  column name
  """
  birth_date
  """
  column name
  """
  id
  """
  column name
  """
  img_profile
  """
  column name
  """
  name
  """
  column name
  """
  password
  """
  column name
  """
  phone_number
  """
  column name
  """
  role_id
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
